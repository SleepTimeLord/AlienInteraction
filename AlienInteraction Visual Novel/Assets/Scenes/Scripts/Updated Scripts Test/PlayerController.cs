//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scenes/Scripts/Updated Scripts Test/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""PlayerControls"",
            ""id"": ""31d50b4c-3b55-478b-a935-3a7f29097256"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""0bef072e-19de-4d36-aea5-d48e722963db"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ActivateAntiGravity"",
                    ""type"": ""Button"",
                    ""id"": ""45a1bce4-bbe5-4058-8a40-76dd16bc7cb1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ExitInspect"",
                    ""type"": ""Button"",
                    ""id"": ""f9dbe0c9-e997-4e5f-b468-28e81f7f70a8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateInpectedObject"",
                    ""type"": ""Button"",
                    ""id"": ""dbae06a9-347d-4ab7-8fb7-da82d3ff39b5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""64e4786f-a437-4765-a2b4-0d92571d9f88"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d826636-5f3a-4568-b4c9-bfe96789050b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2fcea8a-2649-4d26-9bbc-2f88c58488ca"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateAntiGravity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7f6c82e-7958-4b5c-8d30-eecad34684a6"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExitInspect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e07858e3-05f8-4a8e-94ba-5353b14427d0"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateInpectedObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerControls
        m_PlayerControls = asset.FindActionMap("PlayerControls", throwIfNotFound: true);
        m_PlayerControls_Interact = m_PlayerControls.FindAction("Interact", throwIfNotFound: true);
        m_PlayerControls_ActivateAntiGravity = m_PlayerControls.FindAction("ActivateAntiGravity", throwIfNotFound: true);
        m_PlayerControls_ExitInspect = m_PlayerControls.FindAction("ExitInspect", throwIfNotFound: true);
        m_PlayerControls_RotateInpectedObject = m_PlayerControls.FindAction("RotateInpectedObject", throwIfNotFound: true);
    }

    ~@PlayerController()
    {
        UnityEngine.Debug.Assert(!m_PlayerControls.enabled, "This will cause a leak and performance issues, PlayerController.PlayerControls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerControls
    private readonly InputActionMap m_PlayerControls;
    private List<IPlayerControlsActions> m_PlayerControlsActionsCallbackInterfaces = new List<IPlayerControlsActions>();
    private readonly InputAction m_PlayerControls_Interact;
    private readonly InputAction m_PlayerControls_ActivateAntiGravity;
    private readonly InputAction m_PlayerControls_ExitInspect;
    private readonly InputAction m_PlayerControls_RotateInpectedObject;
    public struct PlayerControlsActions
    {
        private @PlayerController m_Wrapper;
        public PlayerControlsActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_PlayerControls_Interact;
        public InputAction @ActivateAntiGravity => m_Wrapper.m_PlayerControls_ActivateAntiGravity;
        public InputAction @ExitInspect => m_Wrapper.m_PlayerControls_ExitInspect;
        public InputAction @RotateInpectedObject => m_Wrapper.m_PlayerControls_RotateInpectedObject;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @ActivateAntiGravity.started += instance.OnActivateAntiGravity;
            @ActivateAntiGravity.performed += instance.OnActivateAntiGravity;
            @ActivateAntiGravity.canceled += instance.OnActivateAntiGravity;
            @ExitInspect.started += instance.OnExitInspect;
            @ExitInspect.performed += instance.OnExitInspect;
            @ExitInspect.canceled += instance.OnExitInspect;
            @RotateInpectedObject.started += instance.OnRotateInpectedObject;
            @RotateInpectedObject.performed += instance.OnRotateInpectedObject;
            @RotateInpectedObject.canceled += instance.OnRotateInpectedObject;
        }

        private void UnregisterCallbacks(IPlayerControlsActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @ActivateAntiGravity.started -= instance.OnActivateAntiGravity;
            @ActivateAntiGravity.performed -= instance.OnActivateAntiGravity;
            @ActivateAntiGravity.canceled -= instance.OnActivateAntiGravity;
            @ExitInspect.started -= instance.OnExitInspect;
            @ExitInspect.performed -= instance.OnExitInspect;
            @ExitInspect.canceled -= instance.OnExitInspect;
            @RotateInpectedObject.started -= instance.OnRotateInpectedObject;
            @RotateInpectedObject.performed -= instance.OnRotateInpectedObject;
            @RotateInpectedObject.canceled -= instance.OnRotateInpectedObject;
        }

        public void RemoveCallbacks(IPlayerControlsActions instance)
        {
            if (m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerControlsActions @PlayerControls => new PlayerControlsActions(this);
    public interface IPlayerControlsActions
    {
        void OnInteract(InputAction.CallbackContext context);
        void OnActivateAntiGravity(InputAction.CallbackContext context);
        void OnExitInspect(InputAction.CallbackContext context);
        void OnRotateInpectedObject(InputAction.CallbackContext context);
    }
}
